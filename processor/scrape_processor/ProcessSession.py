import pymongo
import requests
import logging
import time

from . import utils
from .process_work import parse_json


class ProcessSession:
    def __init__(self):
        """Initialize the ProcessSession with MongoDB client and collection."""
        self.mongo_client = None
        self.database = None
        self.setup_resource()
        
    def setup_resource(self):
        """Set up the MongoDB client and collection."""
        try:
            logging.info("Initializing ProcessSession...")
            self.mongo_client = pymongo.MongoClient(utils.construct_mongo_uri())
            self.database = self.mongo_client["reddit_scrapes"]
            self.src_collection = self.database["tmp_links"]
    
            logging.info("MongoDB connection established successfully.")
        except pymongo.errors.ConnectionError as e:
            logging.error(f"Failed to connect to MongoDB: {e}")
            raise e
        
    def get_json(self, url=""):
        """Fetch JSON data from the given URL."""
        headers = { #generated by copilot
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.9",
            "Referer": "https://www.reddit.com/",
            "Connection": "keep-alive"
        }
        try:
            logging.info(f"Requesting URL: {url}")
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                logging.info(f"Successfully retrieved data from {url}")
                return response.json()
            else:
                logging.error(f"Failed to retrieve data: {response.status_code} from {url}")
        except Exception as e:
            logging.error(f"Exception occurred while requesting {url}: {e}")
        return None
    
    def insert_mongo(self, content, save_to):
        """Insert or update content in the specified MongoDB collection."""
        target_collection = self.database[save_to]
        query = {"title": content["title"], "author": content["author"]}
    
        exists = target_collection.find_one(query)
        if exists: 
            logging.info(f"Content already exists in {save_to}. Updating...")
            target_collection.update_one(
                {"title": content['title'], "author": content['author']},
                {"$set": content}
            )
        else:
            logging.info(f"Inserting new content into {save_to}.")
            target_collection.insert_one(content)
    
    def process(self, target_collection, url):
        """Process the JSON content from the given URL."""
        json_content = self.get_json(url)
        if not json_content:
            logging.error("No JSON content retrieved.")
            return
        
        try:
            post_data = parse_json(json_content)
            if post_data:
                logging.info(f"Processed post data from URL: {url}")
                self.insert_mongo(content=post_data, save_to=target_collection)
                logging.info("Post data inserted into MongoDB collection.")
            else:
                logging.error("Failed to process JSON content.")
        except Exception as e:
            logging.error(f"Error processing JSON content: {e}")
    
    def constantly_process(self):
        """Continuously process the links from the source collection."""
        times_waited = 0
        reset_count = 5
        wait_time = 2  # seconds
        while True:
            doc = self.src_collection.find_one_and_delete({})
            if doc:
                if 'url' in doc:
                    try:
                        self.process(url=doc['url'] + ".json", target_collection=doc['destination_collection'])
                        self.post_number += 1
                        logging.info(f"Processed page with json: {doc['url']}")
                    except Exception as e:
                        logging.error(f"Process error for {doc['url']}: {e}")
            else:
                time.sleep(wait_time)  # Wait before checking for new docs
                times_waited += 1
                logging.info(f"No new documents found. Waited {times_waited} times.")
                if times_waited % reset_count == 0:
                    logging.info("No new documents found. Resetting post_number...")
                    self.post_number = 1  # Reset post number after processing all documents
                    times_waited = 1 # Reset the wait count after reset